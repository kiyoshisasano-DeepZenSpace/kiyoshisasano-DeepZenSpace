#!/usr/bin/env python3
# -*- coding: utf-8 -*-
import sys, json, yaml, textwrap
from pathlib import Path

HERE = Path(__file__).resolve().parent
ROOT = HERE
CANON = ROOT / "mapping.canonical.yaml"
OUT_FWD = ROOT / "README_terms_mapping.md"         # PLD→Academic
OUT_REV = ROOT / "academic_to_pld_reverse.md"      # Academic→PLD
OUT_BIB = ROOT / "references.bib"

def h(s): return s if s is not None else ""

def section_header():
    return textwrap.dedent("""\
    # PLD × Academic Frameworks — Mapping (Auto-generated)
    > Source: `mapping.canonical.yaml` — Do not edit this file by hand.

    """)

def entry_block_forward(e):
    # 正引き：PLD → Academic
    header = f"### {e['pld_term']}  \n*Tier:* `{e.get('tier','')}`  \n*ID:* `{e['id']}`\n\n"
    desc = f"{h(e.get('description'))}\n\n" if e.get('description') else ""
    rows = ["| Academic Term | Field | Ref |",
            "|---|---|---|"]
    for a in e.get("academic_equivalents", []):
        rows.append(f"| {h(a.get('term'))} | {h(a.get('field'))} | {h(a.get('ref_key'))} |")
    tbl = "\n".join(rows) + "\n\n"
    note = f"> Notes: {e.get('notes')}\n\n" if e.get('notes') else ""
    return header + desc + tbl + note

def build_forward(entries):
    entries = sorted(entries, key=lambda x: (x.get("tier","zzz"), x["pld_term"].lower()))
    parts = [section_header(), "## Forward Mapping: PLD ➜ Academic\n\n"]
    for e in entries:
        parts.append(entry_block_forward(e))
    return "".join(parts)

def build_reverse(entries):
    # 逆引き：Academic → PLD
    # アカデミック項目をキーに再編
    acc = []
    for e in entries:
        for a in e.get("academic_equivalents", []):
            acc.append({
                "academic_term": a.get("term"),
                "field": a.get("field"),
                "ref_key": a.get("ref_key"),
                "pld_term": e["pld_term"],
                "tier": e.get("tier",""),
                "id": e["id"],
            })
    acc.sort(key=lambda x: (x["field"] or "zzz", x["academic_term"] or ""))

    header = textwrap.dedent("""\
    # Academic → PLD Reverse Mapping (Auto-generated)
    > Source: `mapping.canonical.yaml` — Do not edit this file by hand.

    ## Reverse Mapping: Academic ➜ PLD

    """)
    rows = ["| Academic Term | Field | Ref | PLD Term | Tier | ID |",
            "|---|---|---|---|---|---|"]
    for r in acc:
        rows.append(f"| {h(r['academic_term'])} | {h(r['field'])} | {h(r['ref_key'])} | {h(r['pld_term'])} | `{h(r['tier'])}` | `{h(r['id'])}` |")
    return header + "\n".join(rows) + "\n"

def build_bib(refs):
    if not refs: return ""
    out = []
    for k, v in refs.items():
        out.append(v.strip() if isinstance(v, str) else "")
        if not out[-1].endswith("\n"): out[-1] += "\n"
    return "\n".join(out)

def main():
    data = yaml.safe_load(CANON.read_text(encoding="utf-8"))
    entries = data.get("entries", [])
    refs = data.get("references", {})

    OUT_FWD.write_text(build_forward(entries), encoding="utf-8")
    OUT_REV.write_text(build_reverse(entries), encoding="utf-8")
    if refs:
        OUT_BIB.write_text(build_bib(refs), encoding="utf-8")

    print("✅ Generated:")
    print(f" - {OUT_FWD}")
    print(f" - {OUT_REV}")
    if refs: print(f" - {OUT_BIB}")

if __name__ == "__main__":
    main()
