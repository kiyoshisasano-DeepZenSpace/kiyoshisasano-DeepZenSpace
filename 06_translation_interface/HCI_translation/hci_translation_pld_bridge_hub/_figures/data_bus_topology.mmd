%% PLD Bridge Hub — Data & Metrics Bus Topology
%% File: data_bus_topology.mmd

flowchart LR
  %% Styles
  classDef source fill:#0ea5e9,stroke:#0369a1,color:#fff,stroke-width:2px;
  classDef proc fill:#22c55e,stroke:#14532d,color:#062,stroke-width:1.5px;
  classDef bus fill:#a78bfa,stroke:#6d28d9,color:#fff,stroke-width:2px;
  classDef store fill:#f59e0b,stroke:#a16207,color:#1f2937,stroke-width:1.5px;
  classDef viz fill:#f43f5e,stroke:#9f1239,color:#fff,stroke-width:1.5px;
  classDef guard fill:#94a3b8,stroke:#334155,color:#0f172a,stroke-width:1.5px;
  classDef aux fill:#e2e8f0,stroke:#64748b,color:#0f172a,stroke-width:1px;

  %% Sources
  subgraph S["Event Sources (Producers)"]
    direction TB
    UI[UI / Orchestrator\n(L3 holds, user input)]:::source
    LLM[Policy / LLM Orchestrator\n(suggest_latency_ms, repair hints)]:::source
    SENS[Edge Sensors\n(clicks, speech, device)]:::source
  end

  %% Encoding & Governance
  subgraph G["Encoding & Governance"]
    direction TB
    ENC[Event Encoder\n(bridge_event_template.json)]:::proc
    ANON[Privacy Anonymizer\n(pseudonymize user/session)]:::guard
    TCLK[Time Sync\n(NTP/Chrony, monotonic→UTC)]:::guard
    IDEM[Idempotency & Seq\n(event_id, seq_no, retry)]:::guard
  end

  %% Validation
  subgraph V["Validation Layer"]
    direction TB
    VAL[Schema Validator\npld_event.schema.json]:::proc
    RULES[Contract Rules\n(02_data_contracts_and_validation.md)]:::guard
    DLQ[Dead-Letter Queue\n(invalid/poison events)]:::guard
  end

  %% Bus
  BUS[[Event Bus / Queue\n(Kafka | Redis Streams)]]:::bus

  %% Storage & Processing
  subgraph P["Storage & Processing"]
    direction LR
    DB[(pld_events\nappend-only)]:::store
    AGG[Metrics Engine\n(SQL / stream agg)]:::proc
    FSTORE[(Feature Store\nsession/user tempo)]:::store
    SAFETY[Safety Monitor\n(loop stability, caps)]:::guard
  end

  %% Sinks / Consumers
  subgraph C["Downstream Consumers"]
    direction TB
    DASH[Dashboards\n(reentry_success_dashboard.json)]:::viz
    EXP[Experiment Service\n(A/B, bandits)]:::proc
    TRAIN[Model Trainer\n(offline)]:::proc
    ALERT[Ops Alerts\n(pager, Slack)]:::viz
  end

  %% Auxiliary Paths
  DLT[DLQ Processor\n(repair + replay)]:::aux
  CDC[Change Data Capture\n(DB → lake)]:::aux

  %% Edges: Source → Governance → Validation → Bus
  UI --> ENC
  LLM --> ENC
  SENS --> ENC

  ENC --> ANON --> TCLK --> IDEM --> VAL --> RULES
  VAL -- valid --> BUS
  VAL -- invalid --> DLQ

  %% Bus fanout
  BUS -->|stream| DB
  BUS -->|stream| AGG
  BUS -->|stream| SAFETY
  BUS -->|stream| FSTORE

  %% Processing to Consumers
  AGG --> DASH
  AGG --> EXP
  AGG --> ALERT
  FSTORE --> EXP
  FSTORE --> TRAIN
  SAFETY --> ALERT

  %% Feedback Loops
  EXP -->|policy updates| LLM
  TRAIN -->|model artifacts| LLM

  %% DLQ handling & CDC
  DLQ --> DLT --> ENC
  DB -->|CDC| CDC

  %% Notes
  class UI,LLM,SENS source
  class ENC,VAL,AGG,EXP,TRAIN proc
  class BUS bus
  class DB,FSTORE store
  class DASH,ALERT viz
  class ANON,TCLK,IDEM,RULES,DLQ,SAFETY guard
  class DLT,CDC aux
