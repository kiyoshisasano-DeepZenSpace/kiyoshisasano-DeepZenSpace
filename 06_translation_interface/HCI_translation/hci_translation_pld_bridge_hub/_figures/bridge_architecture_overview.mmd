%% bridge_architecture_overview.mmd
%% Phase Loop Dynamics (PLD) — Bridge Hub Architecture Overview
%% Mermaid flowchart showing relationships among Theory (01), Bridge Hub (03), and Quickstart Kit (02),
%% plus runtime dataflow between UI/Orchestrator, LLM policy, Event Bus, and Metrics/Dashboards.

flowchart LR
  %% --- High-level stack ---
  A01["01 — PLD Theory\n• Mathematical Appendix\n• Operator Algebra (L₁–L₅)\n• HCI Lexicon"]:::theory
  A03["03 — PLD Bridge Hub\n(Entry point for engineers)"]:::hub
  A02["02 — Quickstart Kit\n• Schemas & Dashboards\n• Datasets & Guides"]:::qs

  A01 --> A03
  A03 --> A02

  %% --- Bridge Hub internals ---
  subgraph HUB[Bridge Hub Components]
    direction LR
    BH_BOOT["bootstrap_demo.py\n• generate demo events\n• validate → report"]:::file
    BH_TRACE["demo_pld_trace/\n• pause & reentry demo\n• Mermaid visualizer"]:::folder
    BH_SCRIPTS["scripts/validate_events.sh\n• CLI validator wrapper"]:::file
    BH_STRUCT["structure_generators/\n• pause_classifier_bot.py\n• reentry_detector.py\n• latency_tracker.py"]:::folder
    BH_CONTRACTS["Contracts & Specs\n• Data Contracts & Validation\n• Signal Translation & State Sync\n• Feedback & Repair Routing\n• Metrics/Data Bus\n• Integration APIs"]:::doc
  end

  A03 --- HUB

  %% --- Quickstart Kit refs ---
  subgraph QS[Quickstart Kit Artifacts]
    direction LR
    Q_SCHEMA["pld_event.schema.json\n(JSON Schema)"]:::file
    Q_METRICS["metrics_schema.yaml\n(metrics formulas)"]:::file
    Q_DASH["dashboards/\nreentry_success_dashboard.json"]:::file
    Q_DATA["datasets/\npld_events_demo.jsonl"]:::file
    Q_GUIDE["guides/\ndrift_event_logging.md"]:::doc
  end
  A02 --- QS

  %% --- Runtime plane ---
  subgraph RUNTIME[Product Runtime (example deployment)]
    direction LR

    subgraph APP[Application Layer]
      UI["UI / Orchestrator\n• renders latency hold (L₃)\n• non-blocking; cancel ≤50ms\n• logs events"]:::svc
      LLM["Policy / LLM\n• suggests τ (no sleeps)\n• proposes repair prompts\n• computes drift score"]:::svc
    end

    subgraph DATA[Telemetry & Analytics]
      BUS[Event Bus / Queue]:::infra
      DB[pld_events table\n(append-only store)]:::db
      METRICS["Metrics Engine\n• DRR, RSR, MLH, etc."]:::svc
      DASH["Dashboards\n• ops & research views"]:::svc
    end
  end

  %% --- Contracts from Bridge Hub to Runtime ---
  BH_CONTRACTS -. "Data contracts\n(JSONL + JSON Schema)" .-> UI
  BH_CONTRACTS -. "State sync & APIs\n(OpenAPI / webhooks)" .-> LLM
  Q_SCHEMA -. "validation" .-> UI
  Q_METRICS -. "aggregation rules" .-> METRICS
  Q_DASH -. "config" .-> DASH

  %% --- Control & data flows ---
  LLM -- "telemetry.suggest_latency_ms\n(reason)" --> UI
  UI -- "emit events (JSONL):\n• drift_detected\n• repair_triggered\n• latency_hold{duration_ms}\n• reentry_success" --> BUS
  BUS --> DB
  DB --> METRICS
  METRICS --> DASH

  %% --- Demos ---
  BH_BOOT -- "writes → demo_quick/events_demo.jsonl" --> Q_SCHEMA
  BH_SCRIPTS -- "validate JSONL against schema" --> Q_SCHEMA
  BH_TRACE -- "produce Mermaid trace & tags" --> DASH

  %% --- Styling ---
  classDef theory fill:#f2f7ff,stroke:#6699ff,stroke-width:1px,color:#0b3d91;
  classDef hub fill:#eefbf4,stroke:#00a36c,stroke-width:1px,color:#0b3d2b;
  classDef qs fill:#fff7ed,stroke:#f59e0b,stroke-width:1px,color:#8a4b00;
  classDef folder fill:#fafafa,stroke:#999,stroke-dasharray: 3 2;
  classDef file fill:#ffffff,stroke:#999;
  classDef doc fill:#fffef7,stroke:#c4a000;
  classDef svc fill:#f7fbff,stroke:#3b82f6;
  classDef infra fill:#f8f9fa,stroke:#64748b;
  classDef db fill:#eef2ff,stroke:#6366f1;

  %% --- Notes ---
  note over UI,LLM: L₁–L₅ mapping\nL₁: boundary cues → state\nL₂: drift→repair cap (≤2)\nL₃: τ hint only; UI renders hold\nL₄: reflex micro-adjust\nL₅: resonance window gate
