%%{init: {'theme': 'neutral', 'fontFamily': 'Inter, Roboto, Helvetica, Arial', 'themeVariables': { 'primaryColor': '#f5f7fb', 'primaryBorderColor': '#c7cce1', 'lineColor': '#8a90b4', 'fontSize': '14px'}}}%%
%% Metrics Flow — PLD Telemetry → Validation → Storage → Dashboards
%% GitHub-compatible Mermaid (v10+)

flowchart LR
    subgraph EMIT["Event Emitters (TSM/Operators)"]
      E1[drift_detected]
      E2[latency_hold{duration_ms}]
      E3[repair_triggered]
      E4[reentry_success{prior_context_id, lag}]
      E5[repair_failed]
    end

    E1 --> BUS & VAL
    E2 --> BUS & VAL
    E3 --> BUS & VAL
    E4 --> BUS & VAL
    E5 --> BUS & VAL

    subgraph VAL["Schema Validator"]
      V1[pld_event.schema.json<br/>field checks]
      V2[metrics_schema.yaml<br/>consistency rules]
    end

    subgraph BUS["Event Bus / Queue"]
      Q1[Kafka/Redis Topic: pld_events.raw]
    end

    VAL -->|valid| Q1
    VAL -. invalid .-> ERR[Validation Report]

    subgraph STORE["Storage Layer"]
      T1[(pld_events table)]
      T2[(aggregates table)]
    end
    Q1 --> T1

    subgraph AGG["Aggregation / Metrics Engine"]
      M1[drift_to_repair_ratio]
      M2[reentry_success_rate]
      M3[avg_latency_hold]
      M4[time_to_repair]
      M5[repair_loop_depth]
    end

    T1 --> AGG --> T2

    subgraph DASH["Dashboards"]
      D1[Reentry Rate Over Time]
      D2[Avg Time to Reentry]
      D3[Drift Heatmap]
      D4[Unresolved Drifts]
    end

    T2 --> D1 & D2 & D3 & D4
