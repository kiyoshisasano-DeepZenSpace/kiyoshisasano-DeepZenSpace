%%{init: {'theme': 'neutral', 'fontFamily': 'Inter, Roboto, Helvetica, Arial', 'themeVariables': { 'primaryColor': '#f5f7fb', 'primaryBorderColor': '#c7cce1', 'lineColor': '#8a90b4', 'fontSize': '14px'}}}%%
%% DRR Loop — Drift → Repair → Reentry (with Latency & Resonance)
%% GitHub-compatible Mermaid (v10+)

stateDiagram-v2
    [*] --> SEGMENT

    state "Segment (L₁)" as SEGMENT
    state "Drift (L₂)" as DRIFT
    state "Latency Hold (L₃)" as HOLD
    state "Repair (L₂)" as REPAIR
    state "Reentry" as REENTRY
    state "Resonance (L₅)" as RESONANCE

    SEGMENT --> DRIFT: drift_signal / log(drift_detected)
    SEGMENT --> RESONANCE: stable_pacing / ρ ≥ 0.85

    DRIFT --> HOLD: suggest_latency(τ=600–1500ms)
    DRIFT --> REPAIR: drift_confirmed ≥ θ
    DRIFT --> SEGMENT: self_corrected

    HOLD --> REPAIR: hold_expired && drift_active
    HOLD --> SEGMENT: user_interrupt || !drift_active

    REPAIR --> REENTRY: confirm || option_select / log(reentry_success)
    REPAIR --> REPAIR: followup && attempts < 2
    REPAIR --> SEGMENT: attempts ≥ 2 / log(repair_failed); handoff()

    REENTRY --> RESONANCE: stable_alignment(window ≥ 6s)
    REENTRY --> SEGMENT: task_switch

    RESONANCE --> DRIFT: drift_signal
    RESONANCE --> SEGMENT: topic_shift

    note right of HOLD
      Non-blocking latency:
      - cancellable ≤50ms
      - log latency_hold(duration_ms)
    end note

    classDef core fill:#ffffff,stroke:#c7cce1,color:#1d2330;
    class SEGMENT,DRIFT,HOLD,REPAIR,REENTRY,RESONANCE core;
