import matplotlib.pyplot as plt
import matplotlib.patches as patches
from matplotlib.lines import Line2D

# SVG出力設定
fig, ax = plt.subplots(figsize=(10, 6))
ax.set_xlim(0, 10)
ax.set_ylim(0, 6)
ax.axis("off")

# === Layer A: Rhythm ===
layerA_y = 4.5
ax.text(0.5, layerA_y + 0.4, "Layer A: Rhythm (Cue–Silence–Segment–Drift–Repair)", 
        fontsize=13, fontweight="bold", color="#e67e22")

# ノード配置
nodes_A = ["Cue", "Silence", "Segment", "Drift", "Repair"]
x_positions = [1, 3, 5, 7, 9]
times = ["<100 ms", "200–500 ms", "1–3 s", ">500 ms lag", "≤2 turns"]

for i, (x, label, t) in enumerate(zip(x_positions, nodes_A, times)):
    ax.add_patch(patches.Circle((x, layerA_y), 0.4, color="#f5cba7", ec="#e67e22"))
    ax.text(x, layerA_y, label, ha="center", va="center", fontsize=11, color="#6e2c00")
    ax.text(x, layerA_y - 0.6, t, ha="center", va="center", fontsize=9, color="#6e2c00")
    if i < len(x_positions) - 1:
        ax.add_line(Line2D([x + 0.4, x_positions[i+1] - 0.4], [layerA_y, layerA_y],
                           lw=1.5, color="#e67e22", alpha=0.8))

# === Layer B: Epistemic Transparency ===
layerB_y = 2.0
ax.text(0.5, layerB_y + 0.4, "Layer B: Epistemic Transparency", 
        fontsize=13, fontweight="bold", color="#3498db")

nodes_B = ["Confidence Indicator (%)", "Hedging", "Calibration", "User Trust (0–100)"]
x_positions_B = [1.5, 4, 6.5, 9]

for i, (x, label) in enumerate(zip(x_positions_B, nodes_B)):
    ax.add_patch(patches.Rectangle((x-0.8, layerB_y-0.3), 1.6, 0.6, 
                                   color="#aed6f1", ec="#21618c", lw=1))
    ax.text(x, layerB_y, label, ha="center", va="center", fontsize=10, color="#154360")
    if i < len(x_positions_B) - 1:
        ax.add_line(Line2D([x + 0.8, x_positions_B[i+1] - 0.8], [layerB_y, layerB_y],
                           lw=1.5, color="#3498db", alpha=0.8))

# === Feedback Loop ===
ax.add_patch(patches.FancyArrow(5, layerB_y + 0.7, 0, 2.5, 
                                width=0.05, head_width=0.3, length_includes_head=True, 
                                color="#8e44ad", alpha=0.7))
ax.add_patch(patches.FancyArrow(5, layerA_y - 0.7, 0, -2.5, 
                                width=0.05, head_width=0.3, length_includes_head=True, 
                                color="#8e44ad", alpha=0.7))
ax.text(5.1, 3.1, "Temporal Transparency Feedback Loop\n(τ, hedge, trust)", 
        fontsize=10, ha="left", color="#4a235a")

# === Decorative Labels ===
ax.text(9.4, 5.0, "Resonant Closure\n(RCI > 0.8)", ha="left", fontsize=9, color="#6e2c00")
ax.text(9.4, 1.8, "TAI = 1 − |trust − acc| / range", ha="left", fontsize=9, color="#1a5276")

# === Legend ===
ax.text(0.5, 0.5, 
        "Legend:\nTelemetry APIs: latency, confidence, trust_input", 
        fontsize=9.5, color="#4d5656", va="top")

# SVG保存
plt.tight_layout()
plt.savefig("dual-layer_interaction_loop_v2.svg", format="svg", bbox_inches="tight")
plt.close()

print("✅ dual-layer_interaction_loop_v2.svg saved successfully.")
